// Code generated by protoc-gen-go. DO NOT EDIT.
// source: store.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	store.proto

It has these top-level messages:
	Params
	DictTable
	StoreTable
	ShareRequest
	ShareReply
	ParamsRequest
	ParamsReply
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Errors output by the remote procedure calls.
type DictProviderError int32

const (
	DictProviderError_OK       DictProviderError = 0
	DictProviderError_BAD_USER DictProviderError = 1
	DictProviderError_INDEX    DictProviderError = 2
)

var DictProviderError_name = map[int32]string{
	0: "OK",
	1: "BAD_USER",
	2: "INDEX",
}
var DictProviderError_value = map[string]int32{
	"OK":       0,
	"BAD_USER": 1,
	"INDEX":    2,
}

func (x DictProviderError) String() string {
	return proto.EnumName(DictProviderError_name, int32(x))
}
func (DictProviderError) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// Parameters needed by store.PubDict and store.PrivDict.
type Params struct {
	TableLen       int32  `protobuf:"varint,1,opt,name=table_len,json=tableLen" json:"table_len,omitempty"`
	MaxOutputBytes int32  `protobuf:"varint,2,opt,name=max_output_bytes,json=maxOutputBytes" json:"max_output_bytes,omitempty"`
	RowBytes       int32  `protobuf:"varint,3,opt,name=row_bytes,json=rowBytes" json:"row_bytes,omitempty"`
	TagBytes       int32  `protobuf:"varint,4,opt,name=tag_bytes,json=tagBytes" json:"tag_bytes,omitempty"`
	SaltBytes      int32  `protobuf:"varint,5,opt,name=salt_bytes,json=saltBytes" json:"salt_bytes,omitempty"`
	Salt           []byte `protobuf:"bytes,6,opt,name=salt,proto3" json:"salt,omitempty"`
}

func (m *Params) Reset()                    { *m = Params{} }
func (m *Params) String() string            { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()               {}
func (*Params) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Params) GetTableLen() int32 {
	if m != nil {
		return m.TableLen
	}
	return 0
}

func (m *Params) GetMaxOutputBytes() int32 {
	if m != nil {
		return m.MaxOutputBytes
	}
	return 0
}

func (m *Params) GetRowBytes() int32 {
	if m != nil {
		return m.RowBytes
	}
	return 0
}

func (m *Params) GetTagBytes() int32 {
	if m != nil {
		return m.TagBytes
	}
	return 0
}

func (m *Params) GetSaltBytes() int32 {
	if m != nil {
		return m.SaltBytes
	}
	return 0
}

func (m *Params) GetSalt() []byte {
	if m != nil {
		return m.Salt
	}
	return nil
}

// A compressed representation of store.PubDict.
type DictTable struct {
	Params *Params `protobuf:"bytes,1,opt,name=params" json:"params,omitempty"`
	Table  []byte  `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`
	Idx    []int32 `protobuf:"varint,3,rep,packed,name=idx" json:"idx,omitempty"`
}

func (m *DictTable) Reset()                    { *m = DictTable{} }
func (m *DictTable) String() string            { return proto.CompactTextString(m) }
func (*DictTable) ProtoMessage()               {}
func (*DictTable) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *DictTable) GetParams() *Params {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *DictTable) GetTable() []byte {
	if m != nil {
		return m.Table
	}
	return nil
}

func (m *DictTable) GetIdx() []int32 {
	if m != nil {
		return m.Idx
	}
	return nil
}

// A compressed representation of store.PubStore.
type StoreTable struct {
	AdjList   []*StoreTable_AdjList `protobuf:"bytes,1,rep,name=adj_list,json=adjList" json:"adj_list,omitempty"`
	Node      []int32               `protobuf:"varint,2,rep,packed,name=node" json:"node,omitempty"`
	NodeCt    int32                 `protobuf:"varint,3,opt,name=node_ct,json=nodeCt" json:"node_ct,omitempty"`
	Sealed    [][]byte              `protobuf:"bytes,4,rep,name=sealed,proto3" json:"sealed,omitempty"`
	DictTable *DictTable            `protobuf:"bytes,5,opt,name=dict_table,json=dictTable" json:"dict_table,omitempty"`
}

func (m *StoreTable) Reset()                    { *m = StoreTable{} }
func (m *StoreTable) String() string            { return proto.CompactTextString(m) }
func (*StoreTable) ProtoMessage()               {}
func (*StoreTable) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *StoreTable) GetAdjList() []*StoreTable_AdjList {
	if m != nil {
		return m.AdjList
	}
	return nil
}

func (m *StoreTable) GetNode() []int32 {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *StoreTable) GetNodeCt() int32 {
	if m != nil {
		return m.NodeCt
	}
	return 0
}

func (m *StoreTable) GetSealed() [][]byte {
	if m != nil {
		return m.Sealed
	}
	return nil
}

func (m *StoreTable) GetDictTable() *DictTable {
	if m != nil {
		return m.DictTable
	}
	return nil
}

type StoreTable_AdjList struct {
	Edge []int32 `protobuf:"varint,1,rep,packed,name=edge" json:"edge,omitempty"`
}

func (m *StoreTable_AdjList) Reset()                    { *m = StoreTable_AdjList{} }
func (m *StoreTable_AdjList) String() string            { return proto.CompactTextString(m) }
func (*StoreTable_AdjList) ProtoMessage()               {}
func (*StoreTable_AdjList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

func (m *StoreTable_AdjList) GetEdge() []int32 {
	if m != nil {
		return m.Edge
	}
	return nil
}

// The share request message.
type ShareRequest struct {
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	X      int32  `protobuf:"varint,2,opt,name=x" json:"x,omitempty"`
	Y      int32  `protobuf:"varint,3,opt,name=y" json:"y,omitempty"`
}

func (m *ShareRequest) Reset()                    { *m = ShareRequest{} }
func (m *ShareRequest) String() string            { return proto.CompactTextString(m) }
func (*ShareRequest) ProtoMessage()               {}
func (*ShareRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ShareRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *ShareRequest) GetX() int32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *ShareRequest) GetY() int32 {
	if m != nil {
		return m.Y
	}
	return 0
}

// The share response message.
type ShareReply struct {
	PubShare []byte            `protobuf:"bytes,1,opt,name=pub_share,json=pubShare,proto3" json:"pub_share,omitempty"`
	Error    DictProviderError `protobuf:"varint,2,opt,name=error,enum=pb.DictProviderError" json:"error,omitempty"`
}

func (m *ShareReply) Reset()                    { *m = ShareReply{} }
func (m *ShareReply) String() string            { return proto.CompactTextString(m) }
func (*ShareReply) ProtoMessage()               {}
func (*ShareReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ShareReply) GetPubShare() []byte {
	if m != nil {
		return m.PubShare
	}
	return nil
}

func (m *ShareReply) GetError() DictProviderError {
	if m != nil {
		return m.Error
	}
	return DictProviderError_OK
}

// The parameters request message.
type ParamsRequest struct {
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *ParamsRequest) Reset()                    { *m = ParamsRequest{} }
func (m *ParamsRequest) String() string            { return proto.CompactTextString(m) }
func (*ParamsRequest) ProtoMessage()               {}
func (*ParamsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ParamsRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

// The parameters response message.
type ParamsReply struct {
	Params *Params           `protobuf:"bytes,1,opt,name=params" json:"params,omitempty"`
	Error  DictProviderError `protobuf:"varint,2,opt,name=error,enum=pb.DictProviderError" json:"error,omitempty"`
}

func (m *ParamsReply) Reset()                    { *m = ParamsReply{} }
func (m *ParamsReply) String() string            { return proto.CompactTextString(m) }
func (*ParamsReply) ProtoMessage()               {}
func (*ParamsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ParamsReply) GetParams() *Params {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *ParamsReply) GetError() DictProviderError {
	if m != nil {
		return m.Error
	}
	return DictProviderError_OK
}

func init() {
	proto.RegisterType((*Params)(nil), "pb.Params")
	proto.RegisterType((*DictTable)(nil), "pb.DictTable")
	proto.RegisterType((*StoreTable)(nil), "pb.StoreTable")
	proto.RegisterType((*StoreTable_AdjList)(nil), "pb.StoreTable.AdjList")
	proto.RegisterType((*ShareRequest)(nil), "pb.ShareRequest")
	proto.RegisterType((*ShareReply)(nil), "pb.ShareReply")
	proto.RegisterType((*ParamsRequest)(nil), "pb.ParamsRequest")
	proto.RegisterType((*ParamsReply)(nil), "pb.ParamsReply")
	proto.RegisterEnum("pb.DictProviderError", DictProviderError_name, DictProviderError_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DictProvider service

type DictProviderClient interface {
	GetShare(ctx context.Context, in *ShareRequest, opts ...grpc.CallOption) (*ShareReply, error)
	GetParams(ctx context.Context, in *ParamsRequest, opts ...grpc.CallOption) (*ParamsReply, error)
}

type dictProviderClient struct {
	cc *grpc.ClientConn
}

func NewDictProviderClient(cc *grpc.ClientConn) DictProviderClient {
	return &dictProviderClient{cc}
}

func (c *dictProviderClient) GetShare(ctx context.Context, in *ShareRequest, opts ...grpc.CallOption) (*ShareReply, error) {
	out := new(ShareReply)
	err := grpc.Invoke(ctx, "/pb.DictProvider/GetShare", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictProviderClient) GetParams(ctx context.Context, in *ParamsRequest, opts ...grpc.CallOption) (*ParamsReply, error) {
	out := new(ParamsReply)
	err := grpc.Invoke(ctx, "/pb.DictProvider/GetParams", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DictProvider service

type DictProviderServer interface {
	GetShare(context.Context, *ShareRequest) (*ShareReply, error)
	GetParams(context.Context, *ParamsRequest) (*ParamsReply, error)
}

func RegisterDictProviderServer(s *grpc.Server, srv DictProviderServer) {
	s.RegisterService(&_DictProvider_serviceDesc, srv)
}

func _DictProvider_GetShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictProviderServer).GetShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DictProvider/GetShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictProviderServer).GetShare(ctx, req.(*ShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictProvider_GetParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictProviderServer).GetParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DictProvider/GetParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictProviderServer).GetParams(ctx, req.(*ParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DictProvider_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.DictProvider",
	HandlerType: (*DictProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetShare",
			Handler:    _DictProvider_GetShare_Handler,
		},
		{
			MethodName: "GetParams",
			Handler:    _DictProvider_GetParams_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "store.proto",
}

func init() { proto.RegisterFile("store.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 533 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0xdd, 0x6e, 0xda, 0x4c,
	0x10, 0x8d, 0x31, 0x36, 0x78, 0x70, 0xf8, 0x9c, 0xd5, 0xd7, 0xd4, 0x4a, 0x15, 0x09, 0xf9, 0xca,
	0x6a, 0x2b, 0xa4, 0xd0, 0xbe, 0x00, 0x09, 0x28, 0x8a, 0x1a, 0x35, 0xd1, 0xd2, 0xbf, 0xab, 0x5a,
	0x6b, 0x76, 0x45, 0x1d, 0x19, 0xec, 0xac, 0xd7, 0x0d, 0xbc, 0x5b, 0x5f, 0xa2, 0x6f, 0x54, 0xcd,
	0x7a, 0x49, 0x2c, 0xf5, 0xa2, 0xed, 0x15, 0x33, 0xe7, 0xcc, 0x9e, 0x39, 0x33, 0x83, 0x61, 0x50,
	0xa9, 0x42, 0x8a, 0x71, 0x29, 0x0b, 0x55, 0x90, 0x4e, 0x99, 0x46, 0x3f, 0x2c, 0x70, 0x6f, 0x99,
	0x64, 0xeb, 0x8a, 0xbc, 0x00, 0x4f, 0xb1, 0x34, 0x17, 0x49, 0x2e, 0x36, 0xa1, 0x35, 0xb2, 0x62,
	0x87, 0xf6, 0x35, 0x70, 0x2d, 0x36, 0x24, 0x86, 0x60, 0xcd, 0xb6, 0x49, 0x51, 0xab, 0xb2, 0x56,
	0x49, 0xba, 0x53, 0xa2, 0x0a, 0x3b, 0xba, 0x66, 0xb8, 0x66, 0xdb, 0x1b, 0x0d, 0x9f, 0x23, 0x8a,
	0x32, 0xb2, 0x78, 0x30, 0x25, 0x76, 0x23, 0x23, 0x8b, 0x87, 0x47, 0x52, 0xb1, 0x95, 0x21, 0xbb,
	0xfb, 0x1e, 0xab, 0x86, 0x3c, 0x05, 0xa8, 0x58, 0xbe, 0x57, 0x77, 0x34, 0xeb, 0x21, 0xd2, 0xd0,
	0x04, 0xba, 0x98, 0x84, 0xee, 0xc8, 0x8a, 0x7d, 0xaa, 0xe3, 0xe8, 0x33, 0x78, 0xb3, 0x6c, 0xa9,
	0x3e, 0xa0, 0x4d, 0x12, 0x81, 0x5b, 0xea, 0x51, 0xb4, 0xfb, 0xc1, 0x04, 0xc6, 0x65, 0x3a, 0x6e,
	0x86, 0xa3, 0x86, 0x21, 0xff, 0x83, 0xa3, 0x67, 0xd2, 0xe6, 0x7d, 0xda, 0x24, 0x24, 0x00, 0x3b,
	0xe3, 0xdb, 0xd0, 0x1e, 0xd9, 0xb1, 0x43, 0x31, 0x8c, 0x7e, 0x5a, 0x00, 0x0b, 0xdc, 0x55, 0x23,
	0x7d, 0x06, 0x7d, 0xc6, 0xef, 0x92, 0x3c, 0xab, 0x54, 0x68, 0x8d, 0xec, 0x78, 0x30, 0x39, 0x46,
	0xf1, 0xa7, 0x8a, 0xf1, 0x94, 0xdf, 0x5d, 0x67, 0x95, 0xa2, 0x3d, 0xd6, 0x04, 0x68, 0x77, 0x53,
	0x70, 0x6c, 0x84, 0xa2, 0x3a, 0x26, 0xcf, 0xa1, 0x87, 0xbf, 0xc9, 0x52, 0x99, 0xcd, 0xb8, 0x98,
	0x5e, 0x28, 0x72, 0x0c, 0x6e, 0x25, 0x58, 0x2e, 0x78, 0xd8, 0x1d, 0xd9, 0xb1, 0x4f, 0x4d, 0x46,
	0x5e, 0x03, 0xf0, 0x6c, 0xa9, 0x92, 0xc6, 0xb3, 0xa3, 0xc7, 0x3a, 0xc4, 0xce, 0x8f, 0x53, 0x53,
	0x8f, 0xef, 0xc3, 0x93, 0x53, 0xe8, 0x4d, 0x9f, 0xba, 0x0b, 0xbe, 0x12, 0xda, 0xac, 0x43, 0x75,
	0x1c, 0x5d, 0x80, 0xbf, 0xf8, 0xc6, 0xa4, 0xa0, 0xe2, 0xbe, 0x16, 0x95, 0x42, 0x37, 0x75, 0x25,
	0x64, 0x92, 0x71, 0xbd, 0x30, 0x8f, 0xba, 0x98, 0x5e, 0x71, 0xe2, 0x83, 0xb5, 0x35, 0xd7, 0xb5,
	0xb6, 0x98, 0xed, 0x8c, 0x5d, 0x6b, 0x17, 0x7d, 0x02, 0x30, 0x22, 0x65, 0xbe, 0xc3, 0x7b, 0x96,
	0x75, 0x9a, 0x54, 0x88, 0x68, 0x11, 0x9f, 0xf6, 0xcb, 0x3a, 0xd5, 0x15, 0xe4, 0x15, 0x38, 0x42,
	0xca, 0x42, 0x6a, 0xa9, 0xe1, 0xe4, 0xd9, 0xde, 0xf7, 0xad, 0x2c, 0xbe, 0x67, 0x5c, 0xc8, 0x39,
	0x92, 0xb4, 0xa9, 0x89, 0x62, 0x38, 0x34, 0xa7, 0xfa, 0x83, 0xbb, 0xe8, 0x2b, 0x0c, 0xf6, 0x95,
	0x68, 0xe1, 0x6f, 0xae, 0xfe, 0x2f, 0x4e, 0x5e, 0xbe, 0x85, 0xa3, 0xdf, 0x38, 0xe2, 0x42, 0xe7,
	0xe6, 0x5d, 0x70, 0x40, 0x7c, 0xe8, 0x9f, 0x4f, 0x67, 0xc9, 0xc7, 0xc5, 0x9c, 0x06, 0x16, 0xf1,
	0xc0, 0xb9, 0x7a, 0x3f, 0x9b, 0x7f, 0x09, 0x3a, 0x93, 0x7b, 0xf0, 0xdb, 0xaf, 0xc8, 0x18, 0xfa,
	0x97, 0x42, 0x35, 0x8b, 0x08, 0xf4, 0x7f, 0xa5, 0xb5, 0xfa, 0x93, 0x61, 0x0b, 0x29, 0xf3, 0x5d,
	0x74, 0x40, 0xce, 0xc0, 0xbb, 0x14, 0xca, 0x7c, 0x8a, 0x47, 0xad, 0x19, 0xcc, 0x8b, 0xff, 0xda,
	0x90, 0x7e, 0x92, 0xba, 0xfa, 0x33, 0x7e, 0xf3, 0x2b, 0x00, 0x00, 0xff, 0xff, 0x1b, 0x44, 0x99,
	0xaa, 0xd5, 0x03, 0x00, 0x00,
}
