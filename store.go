package store

import (
	"crypto/aes"
	"crypto/cipher"
	"crypto/rand"
	"crypto/sha256"
	"encoding/hex"
	"fmt"

	"github.com/cjpatton/store/pb"
	"golang.org/x/crypto/pbkdf2"
)

const SealKeyBytes = 16
const KeyBytes = DictKeyBytes + SealKeyBytes

// GenerateKey generates a fresh, random key and returns it.
func GenerateKey() []byte {
	K := make([]byte, KeyBytes)
	_, err := rand.Read(K)
	if err != nil {
		return nil
	}
	return K
}

// DeriveKeyFromPassword derives a key from a password and (optional) salt and
// returns it.
//
// If salt == nil, then no salt is used. Note that the salt is not the same as
// pb.Params.Salt. pb.Params.Salt is generated by NewDict(), which in turn
// depends on the key.
func DeriveKeyFromPassword(password, salt []byte) []byte {
	return pbkdf2.Key(password, salt, 4096, KeyBytes, sha256.New)
}

type PubStore struct {
	dict   *PubDict
	sealed [][]byte
	graph  Graph
}

type PrivStore struct {
	dict *PrivDict
	aead cipher.AEAD
}

func NewStore(K []byte, M map[string]string) (*PubStore, *PrivStore, error) {

	cM := newCMap(M)
	defer cM.free()

	pub := new(PubStore)
	priv := new(PrivStore)

	block, err := aes.NewCipher(K[:DictKeyBytes])
	if err != nil {
		return nil, nil, err
	}
	priv.aead, err = cipher.NewGCM(block)
	if err != nil {
		return nil, nil, err
	}

	cN := cM.getNonceMap(priv.aead.NonceSize())
	if cN == nil {
		return nil, nil, Error("hella") // FIXME
	}
	defer cN.free()

	pub.sealed = make([][]byte, len(M))
	for i := 0; i < len(M); i++ {
		// TODO M and A copied twice unnecessarily
		cNonce, cNonceBytes := cN.getOutput(i)
		cMessage, cMessageBytes := cM.getOutput(i)
		cAssociatedData, cAssociatedDataBytes := cM.getInput(i)
		N := cBytesToBytes(cNonce, cNonceBytes)
		M := cBytesToBytes(cMessage, cMessageBytes)
		A := cBytesToBytes(cAssociatedData, cAssociatedDataBytes)
		pub.sealed[i] = priv.aead.Seal(nil, N, M, A)
	}

	pub.dict, priv.dict, pub.graph, err = newDictAndGraph(K[DictKeyBytes:], cN)
	if err != nil {
		return nil, nil, err
	}

	return pub, priv, nil
}

func (priv *PrivStore) GetIdx(input string) (int, int, error) {
	return priv.dict.GetIdx(input)
}

func (pub *PubStore) GetShare(x, y int) ([]byte, error) {

	// Get nonce share.
	nonceShare, err := pub.dict.GetShare(x, y)
	if err != nil {
		return nil, err
	}

	// Look up sealed output.
	for i := 0; i < len(pub.graph[x]); i++ {
		e := pub.graph[x][i]
		for j := 0; j < len(pub.graph[y]); j++ {
			if pub.graph[y][j] == e {
				return append(nonceShare, pub.sealed[e]...), nil
			}
		}
	}

	return nil, ItemNotFound
}

func (priv *PrivStore) GetOutput(input string, pubShare []byte) (string, error) {
	nonceShareBytes := priv.dict.params.row_bytes
	nonce, err := priv.dict.GetOutput(input, pubShare[:nonceShareBytes])
	if err != nil {
		return "", err
	}
	output, err := priv.aead.Open(
		nil, []byte(nonce), pubShare[nonceShareBytes:], []byte(input))
	if err != nil {
		return "", ItemNotFound
	}
	return string(output), nil
}

func (pub *PubStore) Free() {
	pub.dict.Free()
}

func (priv *PrivStore) Free() {
	priv.dict.Free()
}

func NewPubStoreFromProto(table *pb.Store) *PubStore {
	pub := new(PubStore)
	pub.dict = NewPubDictFromProto(table.GetDict())
	pub.sealed = table.GetSealed()
	pub.graph = make(Graph, table.GetNodeCt())
	for i := 0; i < len(table.Node); i++ {
		pub.graph[table.Node[i]] = table.AdjList[i].Edge
	}
	return pub
}

func (pub *PubStore) GetProto() *pb.Store {
	adjList := make([]*pb.Store_AdjList, 0)
	node := make([]int32, 0)
	for i := 0; i < len(pub.graph); i++ {
		if len(pub.graph[i]) > 0 {
			node = append(node, int32(i))
			adjList = append(adjList,
				&pb.Store_AdjList{Edge: pub.graph[i]})
		}
	}
	return &pb.Store{
		Dict:    pub.dict.GetProto(),
		Sealed:  pub.sealed,
		Node:    node,
		AdjList: adjList,
		NodeCt:  int32(len(pub.graph)),
	}
}

func (pub *PubStore) String() string {
	str := pub.dict.String()
	for i := 0; i < len(pub.sealed); i++ {
		str += fmt.Sprintf("%s\n", hex.EncodeToString(pub.sealed[i]))
	}
	return str
}

func NewPrivStore(K []byte, params *pb.Params) (*PrivStore, error) {
	priv := new(PrivStore)

	block, err := aes.NewCipher(K[:DictKeyBytes])
	if err != nil {
		return nil, err
	}
	priv.aead, err = cipher.NewGCM(block)
	if err != nil {
		return nil, err
	}

	priv.dict, err = NewPrivDict(K[DictKeyBytes:], params)
	if err != nil {
		return nil, err
	}
	return priv, nil
}

func (priv *PrivStore) GetParams() *pb.Params {
	return priv.dict.GetParams()
}
