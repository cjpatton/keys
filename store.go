package store

import (
	"crypto/aes"
	"crypto/cipher"
	"crypto/rand"
	"crypto/sha256"
	//"fmt"

	"golang.org/x/crypto/pbkdf2"
)

const SealKeyBytes = 16
const KeyBytes = DictKeyBytes + SealKeyBytes

// GenerateKey generates a fresh, random key and returns it.
func GenerateKey() []byte {
	K := make([]byte, KeyBytes)
	_, err := rand.Read(K)
	if err != nil {
		return nil
	}
	return K
}

// DeriveKeyFromPassword derives a key from a password and (optional) salt and
// returns it.
//
// If salt == nil, then no salt is used. Note that the salt is not the same as
// pb.DictParams.Salt. pb.DictParams.Salt is generated by NewDict(), which in turn
// depends on the key.
func DeriveKeyFromPassword(password, salt []byte) []byte {
	return pbkdf2.Key(password, salt, 4096, KeyBytes, sha256.New)
}

type PubStore struct {
	dict   *PubDict
	sealed [][]byte
	graph  Graph
}

type PrivStore struct {
	dict *PrivDict
	aead cipher.AEAD
}

func NewStore(K []byte, M map[string]string) (*PubStore, *PrivStore, error) {

	cM := newCMap(M)
	defer cM.free()

	pub := new(PubStore)
	priv := new(PrivStore)

	block, err := aes.NewCipher(K[:DictKeyBytes])
	if err != nil {
		return nil, nil, err
	}

	priv.aead, err = cipher.NewGCM(block)
	if err != nil {
		return nil, nil, err
	}

	cN := cM.getNonceMap(priv.aead.NonceSize())
	if cN == nil {
		return nil, nil, Error("hella") // FIXME
	}
	defer cN.free()

	pub.sealed = make([][]byte, len(M))
	for i := 0; i < len(M); i++ {
		// TODO M and A copied twice unnecessarily
		cNonce, cNonceBytes := cN.getOutput(i)
		cMessage, cMessageBytes := cM.getOutput(i)
		cAssociatedData, cAssociatedDataBytes := cM.getInput(i)
		N := cBytesToBytes(cNonce, cNonceBytes)
		M := cBytesToBytes(cMessage, cMessageBytes)
		A := cBytesToBytes(cAssociatedData, cAssociatedDataBytes)
		pub.sealed[i] = priv.aead.Seal(nil, N, M, A)
	}

	pub.dict, priv.dict, pub.graph, err = newDictAndGraph(K[DictKeyBytes:], cN)
	if err != nil {
		return nil, nil, err
	}

	return pub, priv, nil
}

func (priv *PrivStore) GetIdx(input string) (int, int, error) {
	return 0, 0, Error("hella") //FIXME
}

func (pub *PubStore) GetShare(x, y int) ([]byte, error) {
	return nil, Error("hella") // FIXME
}

func (priv *PrivStore) GetOutput(input string, pubShare []byte) (string, error) {
	return "", Error("hella") //FIXME
}

func (pub *PubStore) Free() {
	pub.dict.Free()
}

func (priv *PrivStore) Free() {
	priv.dict.Free()
}
